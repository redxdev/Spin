# Example Sequence

# Comments start with #

# Initialization commands
# A command list at the beginning of a document will be executed when the document is loaded into a
# sequence.
# "begin" is an alias for "next", they both do the same thing.
>begin hello1

+hello1
Hello world! This is an example dialogue sequence.
+> next hello2

+hello2
This is another piece of dialogue.
+> next format1

+format1
The name of each piece of dialogue is found after the first \+. The dialogue itself is
taken from the first non-empty non-command line after that, and goes until the next \+.

Unless you change settings, linebreaks are removed except in cases where there are multiple.
+> next format2

+format2
You can add your own markup (like for [i]bbcode[/i]) as well, but that depends on your implementation.
+> next format3

+format3
Some symbols can't be used by themselves. Instead, you can either use the echo command (example: {{e "+"}})
or put a backslash (example: \+).

The list of characters that must be escaped are: \+, \>, \#, \$, and \\. Strings in function arguments cannot have
escape sequences at this time.
+> next commands1

+commands1
Commands are additional functions that can be called over the course of a dialogue. The most
common one is "next", which sets the next piece of dialogue.
+> next commands2

+commands2
Commands are run immediately upon activating a piece of dialogue. As such, if you want a command
to run only upon ending a dialogue, you need a placeholder dialogue that has the "skip" command.
+> next commands3

+commands3
+
> next commands4
> skip

+commands4
Commands are given on each line after a \> character.
+> next expr1

+expr1
Expressions are inline markup in dialogue that allows the interpreter to change what dialogue says.

{ifunset $foo}
For example, this bit of dialogue has set a variable "foo" to true. The next piece of dialogue actually links
back to here, but this line will change as a result.
{/}

{ifset $foo}
Foo is now \"{$foo}\".
{/}
+
> {ifset $foo}next expr2{/}
> {ifunset $foo}set $foo "Hello World!"; next expr1{/}

+expr2
A quick note about expressions and whitespace - an expression function or block that doesn't generate any text will
consume all of the whitespace before it. This means that (for example) an "if" block that was set off from the rest of
the text won't create newlines if it isn't used. An example of that is {{noop}} here, where a function has been placed in
this text that won't emit any new text, but due to this rule there also won't be any weird spacing.
+> next expr3

+expr3
Expressions can also be used in commands themselves. Technically, expressions just modify text. The expression parser
is run before anything happens, and then the result is fed either to the command parser or output as a dialogue line.
+> next expr4

+expr4
Expressions can also contain functions. Functions use a {{noop}} different syntax, but can be used for a variety
of things.
+> next load1

+load1
Sequence files are always loaded as a whole. In order to break up sequences, you can split a single logical
sequence into files, or share files between sequences. To do this, you simply have to call the "seq" command.
+> seq "sequences/example2.spd"